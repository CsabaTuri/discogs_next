import React from "react"
import Head from "next/head";
import Link from "next/link";
import type { NextPage } from 'next'
import { useCookies } from "react-cookie";
import createClient from "../../services/client/client";
import Button from "react-bootstrap/Button";
import { ARTIST, ADD_ARTIST_TO_FAVORITES, REMOVE_ARTIST_FROM_FAVORITES } from "../../services/client/queries";
import Col from "react-bootstrap/Col";
import Layout from "../../src/components/layout";
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import { requireAuthentication } from "../../services/auth/requireAuthentication";
import { FaStar } from "react-icons/fa";
import { FaTrash } from "react-icons/fa";
import { ArtistObject, Member, Group, CTX } from "../../types"
import { useNotificationContext } from "../../src/context/notification/context";
import Youtube from "../../src/components/youtube"

const Artist: NextPage<ArtistObject> = (props: ArtistObject) => {
  const { data } = props;
  const [isFavorite, setIsFavorite] = React.useState(true);
  const { name, profile, urls, members, groups, id } = data.artist;
  const [cookies] = useCookies<string>(["auth"]);
  const { dispatch }: any = useNotificationContext();

  React.useEffect(() => {
    setFavoriteState()
  }, [])


  async function setFavoriteState(): Promise<void> {
    let Ids: number[] = [];
    await data.getFavoritesArtist.map((id: any) => {
      Ids.push(parseInt(id.artist_id))
    });
    setIsFavorite(Ids.includes(id));
  }

  async function addToFavorites(id: number, name: string): Promise<void> {
    const token = cookies.token;
    const client = createClient(token);
    const { errors } = await client.mutate({
      mutation: ADD_ARTIST_TO_FAVORITES,
      variables: {
        artist_id: id,
        artist_name: name,
      },
    });
    if (errors) {
      dispatch({ type: "notification", payload: { text: errors[0].message, type: "danger" } })
    } else {
      setIsFavorite(true);
      dispatch({ type: "notification", payload: { text: "success", type: "success" } })
    }
  }
  async function removeElemFromFavorites(data: any) {
    const token = cookies.token;
    const client = createClient(token);
    const { errors } = await client.mutate({
      mutation: REMOVE_ARTIST_FROM_FAVORITES,
      variables: data,
    });
    if (errors) {
      dispatch({ type: "notification", payload: { text: errors[0].message, type: "danger" } })
    } else {
      setIsFavorite(false);
      dispatch({ type: "notification", payload: { text: "success", type: "success" } })
    }
  }
  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Col md={8}>
        <h1>{!!name ? name : null}</h1>
        <Youtube data={name} />
        {!isFavorite ? (
          <Button
            variant="warning"
            onClick={() => addToFavorites(id, name)}
          >
            <FaStar />
          </Button>
        ) : (
          <Button
            variant="danger"
            onClick={() => removeElemFromFavorites(data.artist)}
          >
            <FaTrash />
          </Button>
        )}
        <Link href={`/artist/releases/${id}`}>Releases</Link>
        <p>{!!profile ? profile : null}</p>

        <ul>
          {!!urls
            ? urls.map((url: string) => (
              <li>
                <Link href={url}>{url}</Link>
              </li>
            ))
            : null}
        </ul>
        <ul>
          {!!members
            ? members.map((member: Member) => (
              <li>
                <Link href={`/artist/${member.id}`}>{member.name}</Link>
                {member.active ? " Active" : "Not active"}
                <Youtube data={member.name} />
              </li>
            ))
            : null}
        </ul>
        <ul>
          {!!groups
            ? groups.map((group: Group) => (
              <li>
                <Link href={`/artist/${group.id}`}>{group.name}</Link>
                {group.active ? " Active" : "Not active"}
                <Youtube data={group.name} />

              </li>
            ))
            : null}
        </ul>

      </Col>
    </Layout>
  );
}
export default Artist
export const getServerSideProps = requireAuthentication(async (context: CTX) => {
  const slug = context.query.slug;
  const locale = context.locale
  const token = JSON.parse(JSON.stringify(context.req.cookies)).token || "";

  const client = createClient(token);
  const { data, errors } = await client.query({
    query: ARTIST,
    variables: {
      slug: slug,
    },
  });
  let errorCode = errors ? errors : false;
  if (errorCode) {
    context.res.statusCode = 404;
  }

  return { props: { errorCode, data, ...await serverSideTranslations(locale, ['common']) } };

})
